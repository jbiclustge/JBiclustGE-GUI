<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>pt.uminho.ceb.biosystems</groupId>
	<artifactId>JBiclustGE-GUI</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<packaging>jar</packaging>

	<developers>
		<developer>
			<name>Orlando Rocha</name>
			<email>ornrocha@gmail.com</email>
		</developer>
	</developers>


	<properties>
		<!-- General configuration -->
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<izpack.version>5.1.2</izpack.version>
		<izpack.staging>${project.build.directory}/staging</izpack.staging>
		<installer-output-filename>JBiclustGE-installer.jar</installer-output-filename>
		<deb-output-filename>JBiclustGE.deb</deb-output-filename>
		<deb-dir-name>JBiclustGE</deb-dir-name>

		<globalResourcesDirectory>src/main/global-resources</globalResourcesDirectory>
		<!-- AIBench dependencies management -->
		<aibench.lib.artifactIds>javatar,aibench-aibench,jhall,log4j</aibench.lib.artifactIds>
		<!-- <aibench.plugins.artifactIds>aibench-core,aibench-workbench,aibench-shell,aibench-pluginmanager</aibench.plugins.artifactIds> -->
		<aibench.plugins.artifactIds>aibench-core,aibench-workbench,aibench-pluginmanager</aibench.plugins.artifactIds>
		<aibench.version>2.10.1</aibench.version>
	</properties>



	<dependencies>
		<dependency>
			<groupId>es.uvigo.ei.sing</groupId>
			<artifactId>aibench-aibench</artifactId>
			<version>${aibench.version}</version>
			<scope>compile</scope>
		</dependency>

		<!-- <dependency> <groupId>es.uvigo.ei.sing</groupId> <artifactId>aibench-shell</artifactId> 
			<version>${aibench.version}</version> <scope>compile</scope> </dependency> -->

		<!-- example of AIBench plugins dependencies -->
		<dependency>
			<groupId>es.uvigo.ei.sing</groupId>
			<artifactId>aibench-core</artifactId>
			<version>${aibench.version}</version>
			<scope>compile</scope>
			<!-- Normally, AIBench plugins dependencies should exclude transitive 
				dependencies, since they came internally in the jar of the plugin -->
			<exclusions>
				<exclusion>
					<groupId>*</groupId>
					<artifactId>*</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>es.uvigo.ei.sing</groupId>
			<artifactId>aibench-workbench</artifactId>
			<version>${aibench.version}</version>
			<scope>compile</scope>
			<exclusions>
				<exclusion>
					<groupId>*</groupId>
					<artifactId>*</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>es.uvigo.ei.sing</groupId>
			<artifactId>aibench-pluginmanager</artifactId>
			<version>${aibench.version}</version>
			<scope>compile</scope>
			<exclusions>
				<exclusion>
					<groupId>*</groupId>
					<artifactId>*</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- Test dependencies -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>pt.uminho.ceb.biosystems</groupId>
			<artifactId>JBiclustGE</artifactId>
			<version>1.0.0-SNAPSHOT</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.0.13</version>
		</dependency>


		<dependency>
			<groupId>pt.uminho.ceb.biosystems.mew</groupId>
			<artifactId>mew-utilities</artifactId>
			<version>1.0.0</version>
		</dependency>
		<dependency>
			<groupId>com.thoughtworks.xstream</groupId>
			<artifactId>xstream</artifactId>
			<version>1.4.9</version>
		</dependency>
		<dependency>
			<groupId>net.coderazzi</groupId>
			<artifactId>tablefilter-swing</artifactId>
			<version>5.3.0</version>
		</dependency>
		<dependency>
			<groupId>org.knowm.xchart</groupId>
			<artifactId>xchart</artifactId>
			<version>3.5.0</version>
		</dependency>
		<dependency>
			<groupId>org.jfree</groupId>
			<artifactId>jfreechart</artifactId>
			<version>1.0.19</version>
		</dependency>
		<dependency>
			<groupId>org.swinglabs</groupId>
			<artifactId>swingx</artifactId>
			<version>1.6.1</version>
		</dependency>



	</dependencies>

	<build>
		<directory>${project.basedir}/target</directory>
		<outputDirectory>${project.build.directory}/dist/plugins_bin/${project.artifactId}</outputDirectory>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.20.1</version>
				<configuration>
					<systemPropertyVariables>
						<org.slf4j.simpleLogger.defaultLogLevel>ERROR</org.slf4j.simpleLogger.defaultLogLevel>
						<org.slf4j.simpleLogger.showDateTime>true</org.slf4j.simpleLogger.showDateTime>
					</systemPropertyVariables>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.7</version>
				<executions>
					<!-- copy resources -->
					<execution>
						<id>copy-global-resources</id>
						<!-- here the phase you need -->
						<phase>validate</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/dist</outputDirectory>
							<resources>
								<resource>
									<directory>${globalResourcesDirectory}</directory>
									<!-- <filtering>true</filtering> -->
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>2.10</version>
				<executions>
					<!-- aibench core libraries -->
					<execution>
						<id>copy-dependencies-aibench-lib</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/dist/lib</outputDirectory>
							<overWriteReleases>false</overWriteReleases>
							<overWriteSnapshots>false</overWriteSnapshots>
							<overWriteIfNewer>true</overWriteIfNewer>
							<includeArtifactIds>${aibench.lib.artifactIds}</includeArtifactIds>
							<includeScope>runtime</includeScope>
						</configuration>
					</execution>

					<!-- aibench plugins -->
					<execution>
						<id>copy-dependencies-aibench-plugins</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/dist/plugins_bin</outputDirectory>
							<overWriteReleases>false</overWriteReleases>
							<overWriteSnapshots>false</overWriteSnapshots>
							<overWriteIfNewer>true</overWriteIfNewer>
							<includeArtifactIds>${aibench.plugins.artifactIds}</includeArtifactIds>
							<includeScope>runtime</includeScope>
						</configuration>
					</execution>

					<!-- rest of dependencies inside current aibench plugin -->
					<execution>
						<id>copy-dependencies-plugin-dependencies</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<!-- <outputDirectory>${project.build.outputDirectory}</outputDirectory> -->
							<outputDirectory>${project.build.directory}/dist/lib</outputDirectory>
							<overWriteReleases>false</overWriteReleases>
							<overWriteSnapshots>false</overWriteSnapshots>
							<overWriteIfNewer>true</overWriteIfNewer>
							<excludeArtifactIds>${aibench.plugins.artifactIds},${aibench.lib.artifactIds}</excludeArtifactIds>
							<includeScope>runtime</includeScope>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>1.8</version>
				<executions>
					<execution>
						<id>create-staging-area</id>
						<!--<phase>process-resources</phase> -->
						<phase>prepare-package</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
								<ant antfile="${basedir}/src/main/ant/build.xml">
									<target name="build-aux-files" />
								</ant>

								<copy todir="${izpack.staging}">
									<fileset dir="${basedir}/src/main/izpack" />
								</copy>
								<copy todir="${izpack.staging}">
									<fileset dir="${project.build.directory}/dist" />
								</copy>
								<delete
									file="${project.build.directory}/dist/default_shortcut_specification.xml"
									failonerror="false" />
								<delete
									file="${project.build.directory}/dist/jbiclustge_installer_unix_shortcutSpec.xml"
									failonerror="false" />
							</target>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.codehaus.izpack</groupId>
				<artifactId>izpack-maven-plugin</artifactId>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>izpack</goal>
						</goals>
						<configuration>
							<!-- base for relative paths in izpack descriptor -->
							<baseDir>${izpack.staging}</baseDir>
							<installFile>${basedir}/src/main/izpack/install.xml</installFile>
							<output>${project.build.directory}/${installer-output-filename}</output>
						</configuration>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>org.codehaus.izpack</groupId>
						<artifactId>izpack-panel</artifactId>
						<version>${izpack.version}</version>
					</dependency>
				</dependencies>
			</plugin>
			<plugin>
				<groupId>org.vafer</groupId>
				<artifactId>jdeb</artifactId>
				<version>1.5</version>
				<executions>
					<execution>
						<id>deb</id>
						<phase>package</phase>
						<goals>
							<goal>jdeb</goal>
						</goals>
						<configuration>
							<verbose>false</verbose>
							<deb>${project.build.directory}/${deb-output-filename}</deb>
							<controlDir>${basedir}/src/main/deb/control</controlDir>
							<dataSet>
								<data>
									<src>${project.build.directory}/dist</src>
									<type>directory</type>
									<mapper>
										<type>perm</type>
										<prefix>/opt/${deb-dir-name}</prefix>
									</mapper>
								</data>
								<data>
									<src>${basedir}/src/main/deb/jbiclustge.desktop</src>
									<type>file</type>
									<mapper>
										<type>perm</type>
										<prefix>/usr/share/applications</prefix>
									</mapper>
								</data>
							</dataSet>
						</configuration>
					</execution>
				</executions>
			</plugin>


		</plugins>
		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.maven.plugins</groupId>
										<artifactId>maven-antrun-plugin</artifactId>
										<versionRange>[1.7,)</versionRange>
										<goals>
											<goal>run</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute />
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>

		<!-- filtering on plugin.xml -->
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
				<includes>
					<include>plugin.xml</include>
				</includes>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>false</filtering>
				<excludes>
					<exclude>plugin.xml</exclude>
				</excludes>
			</resource>
		</resources>
	</build>
	<repositories>
		<repository>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
			<id>bintray</id>
			<url>https://jcenter.bintray.com</url>
		</repository>
		<repository>
			<id>git-ornrocha</id>
			<url>https://github.com/ornrocha/thirdparty/raw/master/mvn-repo</url>
			<snapshots>
				<enabled>true</enabled>
				<updatePolicy>always</updatePolicy>
			</snapshots>
		</repository>
		<repository>
			<id>sing-repository</id>
			<name>SING repository</name>
			<url>http://maven.sing-group.org/repository/maven/</url>
		</repository>
	</repositories>
</project>
